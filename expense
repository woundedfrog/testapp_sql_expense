#! /usr/bin/env ruby

require "pg"
require "io/console"

class ExpenseData

  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def setup_schema
    result = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL

    if result[0]["count"] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
          memo text NOT NULL,
          created_on date NOT NULL
        );
      SQL
    end
  end
end

  def list_expenses
    result = @connection.exec_params("SELECT * FROM expenses ORDER BY created_on ASC")
    puts "There are #{result.ntuples} expenses"
    display_expenses(result) if result.ntuples > 0
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
    puts 'New expense added successfully'
  end

  def search_expenses(keyword)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{keyword}%"])
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts "All expenses have been deleted."
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses where id = $1"
    result = @connection.exec_params(sql, [id])

    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(sql, [id])
      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  private

  def display_count(expenses)
    count = expenses.ntuples
    if count == 0
      puts 'There are no expenses.'
    else
      puts "There are #{count} expense#{"s" if count != 1}."
    end
  end

  def display_expenses(results)
    results.each do |tuple|
      columns = [ tuple["id"].rjust(3),
      tuple["created_on"].rjust(10),
      tuple["amount"].rjust(12),
      tuple["memo"] ]

      puts columns.join(" | ")
    end
    puts '-' * 50
    amount_total = results.field_values("amount").map(&:to_f).inject(:+)

    puts "Total #{amount_total.to_s.rjust(25)}"
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    command = args.shift
    case command
    when 'add'
      amount = args[0]
      memo = args[1]
      abort 'You must provide an amount and memo' unless amount && memo
      @application.add_expense(amount, memo)
    when 'clear'
      puts 'This will remove all expenses. Are you use? (y/n)'
      answer = $stdin.getch
      @application.delete_all_expenses if answer == 'y'
    when 'delete'
      @application.delete_expense(args[0])
    when "list"
        @application.list_expenses
    when 'search'
      @application.search_expenses(args[0])
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
    An expense recording system

    Commands:

    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)
